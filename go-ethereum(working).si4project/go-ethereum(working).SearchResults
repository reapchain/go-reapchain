---- RegisterEthService Matches (2 in 2 files) ----
makeFullNode in config.go (cmd\geth) : 
	utils.RegisterEthService(stack, &cfg.Eth)
flags.go (cmd\utils) line 1008 : 
// RegisterEthService adds an Ethereum client to the stack.
func RegisterEthService(stack *node.Node, cfg *eth.Config) {
---- RegisterEthService Search Errors Encountered (5) ----
The following 5 files could not be processed:
C:\Users\Administrator\go\src\github.com\ethereum\go-ethereum\개발관련파일들\genesis.json : File could not be opened.
C:\Users\Administrator\go\src\github.com\ethereum\go-ethereum\개발관련파일들\istanbul-genesis.json : File could not be opened.
C:\Users\Administrator\go\src\github.com\ethereum\go-ethereum\consensus\poDC\backend\pre-prepare\preprepare.go : File could not be opened.
C:\Users\Administrator\go\src\github.com\ethereum\go-ethereum\consensus\poDC\backend\pre-prepare\preprepare_test.go : File could not be opened.
C:\Users\Administrator\go\src\github.com\ethereum\go-ethereum\개발관련파일들\simpleContract.go : File could not be opened.
---- New Matches (538 in 185 files) ----
func in accounts.go (mobile) : 
		return nil, errors.New("index out of bounds")
func in accounts.go (mobile) : 
		return errors.New("index out of bounds")
func in account_cache.go (accounts\keystore) : 
		logger := log.New("path", path)
generateCache in algorithm.go (consensus\ethash) : 
	logger := log.New("epoch", epoch)
generateDataset in algorithm.go (consensus\ethash) : 
	logger := log.New("epoch", epoch)
TestConcurrentDiskCacheGeneration in algorithm_test.go (consensus\ethash) : 
			ethash := New(cachedir, 0, 1, "", 0, 0)
api.go (contracts\chequebook) line 28 : 
var errNoChequebook = errors.New("no chequebook")
func in api.go (eth\filters) : 
	filter := New(api.backend, api.useMipMap)
func in api.go (eth\filters) : 
	filter := New(api.backend, api.useMipMap)
func in api.go (eth\filters) : 
			return errors.New("invalid addresses in query")
api.go (internal\debug) line 101 : 
		return errors.New("CPU profiling already in progress")
api.go (internal\debug) line 123 : 
		return errors.New("CPU profiling not in progress")
func in api.go (internal\ethapi) : 
		return false, errors.New("unlock duration too large")
api.go (whisper\whisperv5) line 30 : 
var whisperOfflineErr = errors.New("whisper is offline")
func in api.go (whisper\whisperv5) : 
		return errors.New("failed to parse enode of trusted peer: " + err.Error())
func in api.go (whisper\whisperv5) : 
			return "", errors.New(fmt.Sprintf("subscribe: topic %d has wrong size: %d", i, len(bt)))
func in api.go (whisper\whisperv5) : 
		return "", errors.New("subscribe: " + err.Error())
func in api.go (whisper\whisperv5) : 
			return "", errors.New("subscribe: sig parameter is invalid")
func in api.go (whisper\whisperv5) : 
			return "", errors.New("subscribe: invalid 'sig' field")
func in api.go (whisper\whisperv5) : 
			return "", errors.New("subscribe: at least one topic must be specified with symmetric encryption")
func in api.go (whisper\whisperv5) : 
			return "", errors.New("subscribe: invalid key ID")
func in api.go (whisper\whisperv5) : 
			return "", errors.New("subscribe: retrieved key is invalid")
func in api.go (whisper\whisperv5) : 
			return "", errors.New("subscribe: invalid key ID")
func in api.go (whisper\whisperv5) : 
			return "", errors.New("subscribe: non-existent identity provided")
func in api.go (whisper\whisperv5) : 
		return errors.New("post: key is missing")
func in api.go (whisper\whisperv5) : 
			return errors.New("post: empty identity")
func in api.go (whisper\whisperv5) : 
		return errors.New(fmt.Sprintf("post: wrong topic size %d", len(args.Topic)))
func in api.go (whisper\whisperv5) : 
			return errors.New("post: key for symmetric encryption is invalid")
func in api.go (whisper\whisperv5) : 
			return errors.New("post: topic is missing for symmetric encryption")
func in api.go (whisper\whisperv5) : 
			return errors.New("post: public key for asymmetric encryption is invalid")
func in api.go (whisper\whisperv5) : 
			return errors.New("post: public key for asymmetric encryption is invalid")
func in api.go (whisper\whisperv5) : 
		return errors.New("post: wrong type (sym/asym)")
func in api.go (whisper\whisperv5) : 
		return errors.New("post: message is too big")
func in api.go (whisper\whisperv5) : 
			return errors.New("post: failed to parse enode of target peer: " + err.Error())
func in api.go (whisper\whisperv5) : 
		return errors.New("post: target PoW is less than minimum PoW, the message can not be sent")
func in api.go (whisper\whisperv5) : 
		return errors.New("wrong type (sym/asym)")
api_test.go (eth) line 35 : 
		state, _ = state.New(common.Hash{}, db)
TestAPIResolve in api_test.go (swarm\api) : 
			expectErr: errors.New(`no DNS to resolve name: "swarm.eth"`),
TestAPIResolve in api_test.go (swarm\api) : 
			expectErr: errors.New(`immutable address not a content hash: "swarm.eth"`),
TestAPIResolve in api_test.go (swarm\api) : 
			expectErr: errors.New(`DNS name not found: "swarm.eth"`),
import in api_test.go (whisper\whisperv5) : 
	w := New()
TestIntegrationAsym in api_test.go (whisper\whisperv5) : 
	w := New()
TestIntegrationSym in api_test.go (whisper\whisperv5) : 
	w := New()
TestIntegrationSymWithFilter in api_test.go (whisper\whisperv5) : 
	w := New()
TestKey in api_test.go (whisper\whisperv5) : 
	w := New()
TestSubscribe in api_test.go (whisper\whisperv5) : 
	w := New()
var in asn1.go (crypto\ecies) : 
		return sha1.New
var in asn1.go (crypto\ecies) : 
		return sha256.New
var in asn1.go (crypto\ecies) : 
		return sha512.New
NewKeyedTransactor in auth.go (accounts\abi\bind) : 
				return nil, errors.New("not authorized to sign this account")
var in backend.go (accounts\abi\bind) : 
	ErrNoCode = errors.New("no contract code at given address")
var in backend.go (accounts\abi\bind) : 
	ErrNoPendingState = errors.New("backend does not support pending state")
var in backend.go (accounts\abi\bind) : 
	ErrNoCodeAfterDeploy = errors.New("no contract code after deployment")
import in backend.go (consensus\istanbul\backend) : 
// New creates an Ethereum backend for Istanbul core engine.
func New(config *istanbul.Config, eventMux *event.TypeMux, privateKey *ecdsa.PrivateKey, db ethdb.Database) consensus.Istanbul {
import in backend.go (consensus\istanbul\backend) : 
		logger:           log.New("backend", "simple"),
import in backend.go (consensus\poDC\backend) : 
// New creates an Ethereum backend for Istanbul core engine.
import in backend.go (consensus\poDC\backend) : 
func New(config *poDC.Config, eventMux *event.TypeMux, privateKey *ecdsa.PrivateKey, db ethdb.Database) consensus.PoDC {
import in backend.go (consensus\poDC\backend) : 
		logger:           log.New("backend", "simple"),
backend.go (consensus\poDC\backend) line 175 : 
// NewRound는 어디에? 있나? Start? New.. set?
backend.go (eth) line 95 : 
// New creates a new Ethereum object (including the
backend.go (eth) line 97 : 
func New(ctx *node.ServiceContext, config *Config) (*Ethereum, error) {
backend.go (eth) line 99 : 
		return nil, errors.New("can't run eth.Ethereum in light sync mode, use les.LightEthereum")
backend.go (eth) line 182 : 
	eth.miner = miner.New(eth, eth.chainConfig, eth.EventMux(), eth.engine)
CreateConsensusEngine in backend.go (eth) : 
		return clique.New(chainConfig.Clique, db)
CreateConsensusEngine in backend.go (eth) : 
		return istanbulBackend.New(&config.Istanbul, ctx.EventMux, ctx.NodeKey(), db)
CreateConsensusEngine in backend.go (eth) : 
		engine := ethash.New(ctx.ResolvePath(config.EthashCacheDir), config.EthashCachesInMem, config.EthashCachesOnDisk,
backend.go (les) line 68 : 
func New(ctx *node.ServiceContext, config *eth.Config) (*LightEthereum, error) {
backend_test.go (consensus\istanbul\backend) line 225 : 
		logger:     log.New("backend", "simple"),
func in backlog.go (consensus\istanbul\core) : 
	logger := c.logger.New("from", src, "state", c.state)
func in backlog.go (consensus\istanbul\core) : 
		backlog = prque.New()
func in backlog.go (consensus\istanbul\core) : 
		logger := c.logger.New("from", src, "state", c.state)
TestStoreBacklog in backlog_test.go (consensus\istanbul\core) : 
		logger:     log.New("backend", "test", "id", 0),
TestStoreBacklog in backlog_test.go (consensus\istanbul\core) : 
	p := validator.New(common.StringToAddress("12345667890"))
TestProcessFutureBacklog in backlog_test.go (consensus\istanbul\core) : 
		logger:     log.New("backend", "test", "id", 0),
TestProcessFutureBacklog in backlog_test.go (consensus\istanbul\core) : 
	p := validator.New(common.StringToAddress("12345667890"))
testProcessBacklog in backlog_test.go (consensus\istanbul\core) : 
		logger:     log.New("backend", "test", "id", 0),
func in base.go (accounts\abi\bind) : 
		return nil, errors.New("no signer to authorize the transaction with")
func in big.go (mobile) : 
		return nil, errors.New("index out of bounds")
func in big.go (mobile) : 
		return errors.New("index out of bounds")
big5.go (vendor\golang.org\x\text\encoding\traditionalchinese) line 29 : 
var errInvalidBig5 = errors.New("traditionalchinese: invalid Big5 encoding")
const in bind.go (accounts\abi\bind) : 
	tmpl := template.Must(template.New("").Funcs(funcs).Parse(tmplSource[lang]))
var in blob.go (vendor\github.com\Azure\azure-storage-go) : 
	errBlobCopyAborted    = errors.New("storage: blob copy is aborted")
	errBlobCopyIDMismatch = errors.New("storage: blob copy id is a mismatch")
func in blob.go (vendor\github.com\Azure\azure-storage-go) : 
	return nil, errors.New("Snapshot not created")
func in blob.go (vendor\github.com\Azure\azure-storage-go) : 
	return "", errors.New("LeaseID not returned")
func in blob.go (vendor\github.com\Azure\azure-storage-go) : 
	return "", errors.New("LeaseID not returned")
func in blob.go (vendor\github.com\Azure\azure-storage-go) : 
		return "", errors.New("Got empty copy id header")
blob.go (vendor\github.com\Azure\azure-storage-go) line 1129 : 
	return "", errors.New("storage: not implemented SAS for versions earlier than 2013-08-15")
blockchain.go (core) line 51 : 
	ErrNoGenesis = errors.New("Genesis not found in chain")
blockchain.go (core) line 119 : 
	bodyCache, _ := lru.New(bodyCacheLimit)
	bodyRLPCache, _ := lru.New(bodyCacheLimit)
	blockCache, _ := lru.New(blockCacheLimit)
	futureBlocks, _ := lru.New(maxFutureBlocks)
	badBlocks, _ := lru.New(badBlockLimit)
func in blockchain.go (core) : 
	if _, err := state.New(currentBlock.Root(), bc.chainDb); err != nil {
func in blockchain.go (core) : 
	statedb, err := state.New(bc.currentBlock.Root(), bc.chainDb)
func in blockchain.go (core) : 
		if _, err := state.New(bc.currentBlock.Root(), bc.chainDb); err != nil {
func in blockchain.go (core) : 
	return bc.stateCache.New(root)
func in blockchain.go (core) : 
	_, err := state.New(block.Root(), bc.chainDb)
testBlockChainImport in blockchain_test.go (core) : 
		statedb, err := state.New(blockchain.GetBlockByHash(block.ParentHash()).Root(), blockchain.chainDb)
func in block_test_util.go (tests) : 
	statedb, err := state.New(common.Hash{}, db)
func in block_validator.go (core) : 
		if _, err := state.New(block.Root(), v.bc.chainDb); err == nil {
func in block_validator.go (core) : 
	if _, err := state.New(parent.Root(), v.bc.chainDb); err != nil {
cast5.go (vendor\golang.org\x\crypto\cast5) line 21 : 
		return nil, errors.New("CAST5: keys must be 16 bytes")
certs.go (vendor\golang.org\x\crypto\ssh) line 212 : 
		return nil, errors.New("ssh: signature parse error")
certs.go (vendor\golang.org\x\crypto\ssh) line 228 : 
		return nil, errors.New("ssh: signer and cert have different public key")
certs.go (vendor\golang.org\x\crypto\ssh) line 288 : 
		return errors.New("ssh: non-certificate host key")
certs.go (vendor\golang.org\x\crypto\ssh) line 305 : 
		return nil, errors.New("ssh: normal key pairs not accepted")
func in chain.go (vendor\github.com\rs\xhandler) : 
	return New(ctx, c.HandlerC(xh))
removeDB in chaincmd.go (cmd\geth) : 
		logger := log.New("database", name)
dump in chaincmd.go (cmd\geth) : 
			state, err := state.New(block.Root(), chainDb)
chain_makers.go (core) line 192 : 
		statedb, err := state.New(parent.Root(), db)
func in channel.go (vendor\golang.org\x\crypto\ssh) : 
		return errors.New("ssh: incoming packet exceeds maximum payload size")
func in channel.go (vendor\golang.org\x\crypto\ssh) : 
		return errors.New("ssh: wrong packet length")
func in channel.go (vendor\golang.org\x\crypto\ssh) : 
		return errors.New("ssh: remote side wrote too much")
func in channel.go (vendor\golang.org\x\crypto\ssh) : 
		return errors.New("ssh: channel response message received on inbound channel")
func in channel.go (vendor\golang.org\x\crypto\ssh) : 
		return errors.New("ssh: duplicate response received for channel")
channel.go (vendor\golang.org\x\crypto\ssh) line 475 : 
var errUndecided = errors.New("ssh: must Accept or Reject channel")
var errDecidedAlready = errors.New("ssh: can call Accept or Reject only once")
newSuiteRunner in check.go (vendor\gopkg.in\check.v1) : 
			runner.tracker.result.RunError = errors.New(msg)
cheque.go (contracts\chequebook) line 141 : 
		log:          log.New("contract", contractAddr),
cheque.go (contracts\chequebook) line 146 : 
		self.log.Trace("New chequebook initialised", "owner", self.owner, "balance", self.balance)
cheque.go (contracts\chequebook) line 473 : 
		log:         log.New("contract", contractAddr),
cheque.go (contracts\chequebook) line 475 : 
	self.log.Trace("New chequebook inbox initialized", "beneficiary", self.beneficiary, "signer", hexutil.Bytes(crypto.FromECDSAPub(signer)))
chunker.go (swarm\storage) line 57 : 
	// hashSize     int64 = hasherfunc.New().Size() // hasher knows about its own length in bytes
chunker.go (swarm\storage) line 85 : 
	hashSize    int64 // self.hashFunc.New().Size()
func in chunker.go (swarm\storage) : 
			return 0, errors.New("aborted")
chunker.go (swarm\storage) line 474 : 
var errWhence = errors.New("Seek: invalid whence")
var errOffset = errors.New("Seek: invalid offset")
cipher.go (vendor\golang.org\x\crypto\ssh) line 180 : 
		return nil, errors.New("ssh: invalid packet length, packet too small")
cipher.go (vendor\golang.org\x\crypto\ssh) line 184 : 
		return nil, errors.New("ssh: invalid packet length, packet too large")
cipher.go (vendor\golang.org\x\crypto\ssh) line 213 : 
			return nil, errors.New("ssh: MAC failure")
func in cipher.go (vendor\golang.org\x\crypto\ssh) : 
		return errors.New("ssh: packet too large")
func in cipher.go (vendor\golang.org\x\crypto\ssh) : 
		return nil, errors.New("ssh: max packet length exceeded.")
var in ciphering.go (vendor\github.com\btcsuite\btcd\btcec) : 
	ErrInvalidMAC = errors.New("invalid mac hash")
var in ciphering.go (vendor\github.com\btcsuite\btcd\btcec) : 
	errInputTooShort = errors.New("ciphertext too short")
var in ciphering.go (vendor\github.com\btcsuite\btcd\btcec) : 
	errUnsupportedCurve = errors.New("unsupported curve")
var in ciphering.go (vendor\github.com\btcsuite\btcd\btcec) : 
	errInvalidXLength = errors.New("invalid X length, must be 32")
	errInvalidYLength = errors.New("invalid Y length, must be 32")
	errInvalidPadding = errors.New("invalid PKCS#7 padding")
ciphering.go (vendor\github.com\btcsuite\btcd\btcec) line 113 : 
	hm := hmac.New(sha256.New, keyM)
ciphering.go (vendor\github.com\btcsuite\btcd\btcec) line 178 : 
	hm := hmac.New(sha256.New, keyM)
client.go (rpc) line 39 : 
	ErrClientQuit                = errors.New("client is closed")
	ErrNoResult                  = errors.New("no result in JSON-RPC response")
	ErrSubscriptionQueueOverflow = errors.New("subscription queue overflow")
func in client.go (rpc) : 
	buffer := list.New()
client.go (rpc) line 773 : 
	val := reflect.New(sub.etype)
func in client.go (swarm\api\client) : 
		return "", errors.New("data size must be greater than zero")
func in client.go (swarm\api\client) : 
		return "", errors.New("file size must be greater than zero")
func in client.go (vendor\github.com\Azure\azure-storage-go) : 
		return nil, errors.New("azure/storage: error creating request: " + err.Error())
func in client.go (vendor\github.com\Azure\go-autorest\autorest) : 
		j, _ := cookiejar.New(nil)
client.go (vendor\golang.org\x\crypto\ssh) line 75 : 
		return nil, nil, nil, errors.New("ssh: must specify HostKeyCallback")
verifyHostKeySignature in client.go (vendor\golang.org\x\crypto\ssh) : 
		return errors.New("ssh: signature parse error")
func in client_auth.go (vendor\golang.org\x\crypto\ssh) : 
				return false, nil, errors.New("ssh: prompt format error")
func in client_auth.go (vendor\golang.org\x\crypto\ssh) : 
			return false, nil, errors.New("ssh: extra data following keyboard-interactive pairs")
func in client_auth.go (vendor\golang.org\x\crypto\ssh) : 
			return false, nil, errors.New("ssh: not enough answers from keyboard-interactive callback")
var in clique.go (consensus\clique) : 
	errUnknownBlock = errors.New("unknown block")
var in clique.go (consensus\clique) : 
	errInvalidCheckpointBeneficiary = errors.New("beneficiary in checkpoint block non-zero")
var in clique.go (consensus\clique) : 
	errInvalidVote = errors.New("vote nonce not 0x00..0 or 0xff..f")
var in clique.go (consensus\clique) : 
	errInvalidCheckpointVote = errors.New("vote nonce in checkpoint block non-zero")
var in clique.go (consensus\clique) : 
	errMissingVanity = errors.New("extra-data 32 byte vanity prefix missing")
var in clique.go (consensus\clique) : 
	errMissingSignature = errors.New("extra-data 65 byte suffix signature missing")
var in clique.go (consensus\clique) : 
	errExtraSigners = errors.New("non-checkpoint block contains extra signer list")
var in clique.go (consensus\clique) : 
	drrInvalidCheckpointSigners = errors.New("invalid signer list on checkpoint block")
var in clique.go (consensus\clique) : 
	errInvalidMixDigest = errors.New("non-zero mix digest")
var in clique.go (consensus\clique) : 
	errInvalidUncleHash = errors.New("non empty uncle hash")
var in clique.go (consensus\clique) : 
	errInvalidDifficulty = errors.New("invalid difficulty")
var in clique.go (consensus\clique) : 
	ErrInvalidTimestamp = errors.New("invalid timestamp")
var in clique.go (consensus\clique) : 
	errInvalidVotingChain = errors.New("invalid voting chain")
var in clique.go (consensus\clique) : 
	errUnauthorized = errors.New("unauthorized")
clique.go (consensus\clique) line 205 : 
// New creates a Clique proof-of-authority consensus engine with the initial
New in clique.go (consensus\clique) : 
func New(config *params.CliqueConfig, db ethdb.Database) *Clique {
func in clique.go (consensus\clique) : 
		return errors.New("uncles not allowed")
color.go (vendor\github.com\fatih\color) line 105 : 
// New returns a newly created color object.
func New(value ...Attribute) *Color {
Set in color.go (vendor\github.com\fatih\color) : 
	c := New(p...)
color.go (vendor\github.com\fatih\color) line 317 : 
//	put := New(FgYellow).SprintFunc()
getCachedColor in color.go (vendor\github.com\fatih\color) : 
		c = New(p)
import in commit.go (consensus\istanbul\core) : 
	logger := c.logger.New("state", c.state)
func in commit.go (consensus\istanbul\core) : 
	logger := c.logger.New("from", src, "state", c.state)
func in commit.go (consensus\istanbul\core) : 
	logger := c.logger.New("from", src, "state", c.state)
TestVerifyCommit in commit_test.go (consensus\istanbul\core) : 
	peer := validator.New(getPublicKeyAddress(privateKey))
func in common.go (mobile) : 
		return nil, errors.New("index out of bounds")
func in common.go (mobile) : 
		return errors.New("index out of bounds")
func in common.go (mobile) : 
		return nil, errors.New("index out of bounds")
func in common.go (mobile) : 
		return errors.New("index out of bounds")
common.go (vendor\github.com\peterh\liner) line 56 : 
var ErrPromptAborted = errors.New("prompt aborted")
common.go (vendor\github.com\peterh\liner) line 60 : 
var ErrNotTerminalOutput = errors.New("standard output is not a terminal")
common.go (vendor\github.com\peterh\liner) line 65 : 
var ErrInvalidPrompt = errors.New("invalid prompt")
compileCmd in compiler.go (cmd\evm) : 
		return errors.New("filename required")
import in compiler.go (cmd\evm\internal\compiler) : 
		return "", errors.New("compiling failed")
var in compiler.go (core\asm) : 
	errExpBol            = errors.New("expected beginning of line")
	errExpElementOrLabel = errors.New("expected beginning of line")
import in completion_test.go (internal\jsre) : 
	re := New("", os.Stdout)
var in compress.go (common\bitutil) : 
	errMissingData = errors.New("missing bytes on input")
var in compress.go (common\bitutil) : 
	errUnreferencedData = errors.New("extra bytes on input")
var in compress.go (common\bitutil) : 
	errExceededTarget = errors.New("target data size exceeded")
var in compress.go (common\bitutil) : 
	errZeroContent = errors.New("zero byte in input content")
loadConfig in config.go (cmd\geth) : 
		err = errors.New(file + ", " + err.Error())
config.go (cmd\geth) line 124 : 
	stack, err := node.New(&cfg.Node)
var in config.go (node) : 
	// is created by New and destroyed when the node is stopped.
import in config_test.go (node) : 
	if _, err := New(&Config{DataDir: dir}); err != nil {
import in config_test.go (node) : 
	if _, err := New(&Config{DataDir: dir}); err != nil {
import in config_test.go (node) : 
	if _, err := New(&Config{DataDir: dir}); err == nil {
var in consensus.go (consensus\ethash) : 
	errLargeBlockTime    = errors.New("timestamp too big")
	errZeroBlockTime     = errors.New("timestamp equals parent's")
	errTooManyUncles     = errors.New("too many uncles")
	errDuplicateUncle    = errors.New("duplicate uncle")
	errUncleIsAncestor   = errors.New("uncle is ancestor")
	errDanglingUncle     = errors.New("uncle's parent is not ancestor")
	errNonceOutOfRange   = errors.New("nonce out of range")
	errInvalidDifficulty = errors.New("non-positive difficulty")
	errInvalidMixDigest  = errors.New("invalid mix digest")
	errInvalidPoW        = errors.New("invalid proof-of-work")
func in consensus.go (consensus\ethash) : 
	uncles, ancestors := set.New(), make(map[common.Hash]*types.Header)
console.go (console) line 75 : 
func New(config Config) (*Console, error) {
console.go (console) line 89 : 
		jsre:     jsre.New(config.DocRoot, config.Printer),
var in consolecmd.go (cmd\geth) : 
	console, err := console.New(config)
remoteConsole in consolecmd.go (cmd\geth) : 
	console, err := console.New(config)
consolecmd.go (cmd\geth) line 179 : 
	console, err := console.New(config)
func in console_test.go (console) : 
		return "", errors.New("prompt timeout")
func in console_test.go (console) : 
		return "", errors.New("input timeout")
func in console_test.go (console) : 
	return "", errors.New("not implemented")
func in console_test.go (console) : 
	return false, errors.New("not implemented")
newTester in console_test.go (console) : 
	stack, err := node.New(&node.Config{DataDir: workspace, UseLightweightKDF: true, Name: testInstance})
newTester in console_test.go (console) : 
	if err = stack.Register(func(ctx *node.ServiceContext) (node.Service, error) { return eth.New(ctx, ethConf) }); err != nil {
newTester in console_test.go (console) : 
	console, err := New(Config{
func in container.go (vendor\github.com\Azure\azure-storage-go) : 
		return errors.New("Unable to set permissions")
func in context.go (vendor\gopkg.in\urfave\cli.v1) : 
		return errors.New("index out of range")
normalizeFlags in context.go (vendor\gopkg.in\urfave\cli.v1) : 
					return errors.New("Cannot use two forms of the same flag: " + name + " " + ff.Name)
contracts.go (core\vm) line 31 : 
var errBadPrecompileInput = errors.New("bad pre compile input")
func in contracts.go (core\vm) : 
	ripemd := ripemd160.New()
core.c (vendor\github.com\karalabe\hid\libusb\libusb) line 586 : 
 * New devices presented by the libusb_get_device_list() function all have a
import in core.go (consensus\istanbul\core) : 
// New creates an Istanbul consensus core
func New(backend istanbul.Backend, config *istanbul.Config) Engine {
import in core.go (consensus\istanbul\core) : 
		logger:             log.New("address", backend.Address()),
import in core.go (consensus\istanbul\core) : 
		pendingRequests:    prque.New(),
func in core.go (consensus\istanbul\core) : 
	logger := c.logger.New("state", c.state)
func in core.go (consensus\istanbul\core) : 
	logger := c.logger.New("state", c.state)
func in core.go (consensus\istanbul\core) : 
		logger = c.logger.New("old_round", -1, "old_seq", 0, "old_proposer", c.valSet.GetProposer())
func in core.go (consensus\istanbul\core) : 
		logger = c.logger.New("old_round", c.current.Round(), "old_seq", c.current.Sequence(), "old_proposer", c.valSet.GetProposer())
func in core.go (consensus\istanbul\core) : 
	// New snapshot for new round
func in core.go (consensus\istanbul\core) : 
	logger.Debug("New round", "new_round", newView.Round, "new_seq", newView.Sequence, "new_proposer", c.valSet.GetProposer(), "valSet", c.valSet.List(), "size", c.valSet.Size())
func in core.go (consensus\istanbul\core) : 
	logger := c.logger.New("old_round", c.current.Round(), "old_seq", c.current.Sequence(), "old_proposer", c.valSet.GetProposer())
cors.go (vendor\github.com\rs\cors) line 5 : 
You can configure it by passing an option struct to cors.New:
cors.go (vendor\github.com\rs\cors) line 7 : 
    c := cors.New(cors.Options{
cors.go (vendor\github.com\rs\cors) line 96 : 
// New creates a new Cors handler with the provided options.
func New(options Options) *Cors {
New in cors.go (vendor\github.com\rs\cors) : 
		c.Log = log.New(os.Stdout, "[cors] ", log.LstdFlags)
Default in cors.go (vendor\github.com\rs\cors) : 
	return New(Options{})
cp.go (vendor\github.com\cespare\cp) line 12 : 
var errCopyFileWithDir = errors.New("dir argument to CopyFile")
crypto.go (crypto) line 131 : 
		return nil, errors.New("invalid hex string")
csv.go (vendor\github.com\olekukonko\tablewriter) line 29 : 
//  Start a New Table Writer with csv.Reader
func in customflags.go (cmd\utils) : 
		return errors.New("invalid integer syntax")
var in dao.go (consensus\misc) : 
	ErrBadProDAOExtra = errors.New("bad DAO pro-fork extra-data")
var in dao.go (consensus\misc) : 
	ErrBadNoDAOExtra = errors.New("bad DAO no-fork extra-data")
database.go (ethdb) line 60 : 
	logger := log.New("database", file)
var in database_util.go (core) : 
	ErrChainConfigNotFound = errors.New("ChainConfig not found") // general config not found error
db.go (vendor\github.com\syndtr\goleveldb\leveldb) line 94 : 
		snapsList: list.New(),
db.go (vendor\github.com\syndtr\goleveldb\leveldb) line 96 : 
		batchPool:    sync.Pool{New: newBatch},
db.go (vendor\github.com\syndtr\goleveldb\leveldb) line 506 : 
			mdb      = memdb.New(db.s.icmp, writeBuffer)
db.go (vendor\github.com\syndtr\goleveldb\leveldb) line 656 : 
		mdb = memdb.New(db.s.icmp, writeBuffer)
dbg.go (vendor\github.com\robertkrimen\otto) line 9 : 
var dbg, dbgf = Dbg.New()
dbg.go (vendor\github.com\robertkrimen\otto\dbg) line 10 : 
    dbg, dbgf := Dbg.New()
dbg.go (vendor\github.com\robertkrimen\otto\dbg) line 36 : 
However, you can also provide your own output destination by invoking dbg.New with
dbg.go (vendor\github.com\robertkrimen\otto\dbg) line 46 : 
    dbg, dbgf := Dbg.New(func(dbgr *Dbgr) {
dbg.go (vendor\github.com\robertkrimen\otto\dbg) line 52 : 
    dbg, dbgf := New(func(dbgr *Dbgr) {
dbg.go (vendor\github.com\robertkrimen\otto\dbg) line 144 : 
New will create and return a pair of debugging functions. You can customize where
dbg.go (vendor\github.com\robertkrimen\otto\dbg) line 153 : 
    dbg, dbgf := Dbg.New(func(dbgr *Dbgr) {
dbg.go (vendor\github.com\robertkrimen\otto\dbg) line 158 : 
func New(options ...interface{}) (dbg DbgFunction, dbgf DbgFunction) {
dbg.go (vendor\github.com\robertkrimen\otto\parser) line 9 : 
var dbg, dbgf = Dbg.New()
var in db_compaction.go (vendor\github.com\syndtr\goleveldb\leveldb) : 
	errCompactionTransactExiting = errors.New("leveldb: compaction transact exiting")
var in db_iter.go (vendor\github.com\syndtr\goleveldb\leveldb) : 
	errInvalidInternalKey = errors.New("leveldb: Iterator: invalid internal key")
func in db_state.go (vendor\github.com\syndtr\goleveldb\leveldb) : 
		mdb = memdb.New(db.s.icmp, maxInt(db.s.o.GetWriteBuffer(), n))
db_transaction.go (vendor\github.com\syndtr\goleveldb\leveldb) line 19 : 
var errTransactionDone = errors.New("leveldb: transaction already closed")
var in decode.go (rlp) : 
	errNoPointer     = errors.New("rlp: interface given to Decode must be a pointer")
	errDecodeIntoNil = errors.New("rlp: pointer given to Decode must not be nil")
decode.go (rlp) line 449 : 
			newval = reflect.New(etype)
decode.go (rlp) line 483 : 
			newval = reflect.New(etype)
decodeInterface in decode.go (rlp) : 
		slice := reflect.New(ifsliceType).Elem()
decodeDecoder in decode.go (rlp) : 
		val.Set(reflect.New(val.Type().Elem()))
var in decode.go (rlp) : 
	EOL = errors.New("rlp: end of list")
var in decode.go (rlp) : 
	ErrExpectedString = errors.New("rlp: expected String or Byte")
	ErrExpectedList   = errors.New("rlp: expected List")
	ErrCanonInt       = errors.New("rlp: non-canonical integer format")
	ErrCanonSize      = errors.New("rlp: non-canonical size information")
	ErrElemTooLarge   = errors.New("rlp: element is larger than containing list")
	ErrValueTooLarge  = errors.New("rlp: value size exceeds available input length")
var in decode.go (rlp) : 
	ErrMoreThanOneValue = errors.New("rlp: input contains more than one value")
var in decode.go (rlp) : 
	errNotInList    = errors.New("rlp: call of ListEnd outside of any list")
	errNotAtEOL     = errors.New("rlp: call of ListEnd not positioned at EOL")
	errUintOverflow = errors.New("rlp: uint overflow")
var in decode.go (vendor\github.com\golang\snappy) : 
	ErrCorrupt = errors.New("snappy: corrupt input")
var in decode.go (vendor\github.com\golang\snappy) : 
	ErrTooLarge = errors.New("snappy: decoded block is too large")
var in decode.go (vendor\github.com\golang\snappy) : 
	ErrUnsupported = errors.New("snappy: unsupported input")
var in decode.go (vendor\github.com\golang\snappy) : 
	errUnsupportedLiteralLength = errors.New("snappy: unsupported literal length")
decode.go (vendor\github.com\naoina\toml) line 182 : 
			fv := reflect.New(elemtyp).Elem()
decode.go (vendor\github.com\naoina\toml) line 231 : 
			vv := reflect.New(slice.Type().Elem()).Elem()
decode.go (vendor\github.com\naoina\toml) line 245 : 
	rv := reflect.New(typ).Elem()
indirect in decode.go (vendor\github.com\naoina\toml) : 
			rv.Set(reflect.New(rv.Type().Elem()))
setArray in decode.go (vendor\github.com\naoina\toml) : 
		tmp := reflect.New(typ).Elem()
TestStreamErrors in decode_test.go (rlp) : 
		{"02", calls{"Bool"}, nil, errors.New("rlp: invalid boolean value: 2")},
newDefaultSet in default.go (consensus\istanbul\validator) : 
		valSet.validators[i] = New(addr)
func in default.go (consensus\istanbul\validator) : 
	valSet.validators = append(valSet.validators, New(address))
testNewValidatorSet in default_test.go (consensus\istanbul\validator) : 
		val := New(addr)
testNormalValSet in default_test.go (consensus\istanbul\validator) : 
	val1 := New(addr1)
	val2 := New(addr2)
testStickyProposer in default_test.go (consensus\istanbul\validator) : 
	val1 := New(addr1)
	val2 := New(addr2)
func in device.go (vendor\github.com\huin\goupnp) : 
		return nil, errors.New("bad/missing SCPD URL, or no URLBase has been set")
var in dial.go (p2p) : 
	errSelf             = errors.New("is self")
	errAlreadyDialing   = errors.New("already dialing")
	errAlreadyConnected = errors.New("already connected")
	errRecentlyDialed   = errors.New("recently dialed")
	errNotWhitelisted   = errors.New("not contained in netrestrict whitelist")
disasmCmd in disasm.go (cmd\evm) : 
		return errors.New("filename required")
func in discover.go (mobile) : 
		return nil, errors.New("index out of bounds")
func in discover.go (mobile) : 
		return errors.New("index out of bounds")
ReadDiskStats in disk_nop.go (metrics) : 
	return errors.New("Not implemented")
distributor.go (les) line 29 : 
var ErrNoPeers = errors.New("no suitable peers available")
newRequestDistributor in distributor.go (les) : 
		reqQueue:    list.New(),
doc.go (log) line 56 : 
    requestlogger := log.New("path", r.URL.Path)
doc.go (log) line 183 : 
    p.Logger = log.New("name", p.name, "alive", p.alive)
doc.go (log) line 192 : 
    player.Logger = log.New("name", p.name, "alive", log.Lazy{isAlive})
doc.go (log) line 229 : 
    var Log = log.New()
doc.go (log) line 264 : 
            Logger: log.New("url", url),
doc.go (log) line 295 : 
        t.Logger = log.New("id", logext.RandId(8), "url", log.Lazy{t.getUrl})
doc.go (rpc) line 63 : 
		return 0, errors.New("divide by zero")
doc.go (vendor\github.com\fatih\color) line 23 : 
    c := color.New(color.FgCyan).Add(color.Underline)
doc.go (vendor\github.com\fatih\color) line 26 : 
    // Or just add them to New()
    d := color.New(color.FgCyan, color.Bold)
doc.go (vendor\github.com\fatih\color) line 32 : 
    red := color.New(color.FgRed)
doc.go (vendor\github.com\fatih\color) line 41 : 
    color.New(color.FgBlue).Fprintln(myWriter, "blue color!")
doc.go (vendor\github.com\fatih\color) line 43 : 
    blue := color.New(color.FgBlue)
doc.go (vendor\github.com\fatih\color) line 49 : 
    red := color.New(color.FgRed).PrintfFunc()
doc.go (vendor\github.com\fatih\color) line 54 : 
    notice := color.New(color.Bold, color.FgGreen).PrintlnFunc()
doc.go (vendor\github.com\fatih\color) line 59 : 
    blue := color.New(FgBlue).FprintfFunc()
doc.go (vendor\github.com\fatih\color) line 63 : 
    success := color.New(color.Bold, color.FgGreen).FprintlnFunc()
doc.go (vendor\github.com\fatih\color) line 69 : 
    yellow := New(FgYellow).SprintFunc()
    red := New(FgRed).SprintFunc()
doc.go (vendor\github.com\fatih\color) line 74 : 
    info := New(FgWhite, BgGreen).SprintFunc()
doc.go (vendor\github.com\fatih\color) line 83 : 
    info := New(FgWhite, BgGreen).SprintFunc()
doc.go (vendor\github.com\fatih\color) line 119 : 
     c := color.New(color.FgCyan)
var in downloader.go (eth\downloader) : 
	errBusy                    = errors.New("busy")
	errUnknownPeer             = errors.New("peer is unknown or unhealthy")
	errBadPeer                 = errors.New("action from bad peer ignored")
	errStallingPeer            = errors.New("peer is stalling")
	errNoPeers                 = errors.New("no peers to keep download active")
	errTimeout                 = errors.New("timeout")
	errEmptyHeaderSet          = errors.New("empty header set by peer")
	errPeersUnavailable        = errors.New("no peers available or all tried for download")
	errInvalidAncestor         = errors.New("retrieved ancestor is invalid")
	errInvalidChain            = errors.New("retrieved hash chain is invalid")
	errInvalidBlock            = errors.New("retrieved block is invalid")
	errInvalidBody             = errors.New("retrieved block body is invalid")
	errInvalidReceipt          = errors.New("retrieved receipt is invalid")
	errCancelBlockFetch        = errors.New("block download canceled (requested)")
	errCancelHeaderFetch       = errors.New("block header download canceled (requested)")
	errCancelBodyFetch         = errors.New("block body download canceled (requested)")
	errCancelReceiptFetch      = errors.New("receipt download canceled (requested)")
	errCancelStateFetch        = errors.New("state data download canceled (requested)")
	errCancelHeaderProcessing  = errors.New("header processing canceled (requested)")
	errCancelContentProcessing = errors.New("content processing canceled (requested)")
	errNoSyncActive            = errors.New("no sync active")
	errTooOld                  = errors.New("peer doesn't speak recent enough protocol version (need version >= 62)")
downloader.go (eth\downloader) line 164 : 
// New creates a new downloader to fetch hashes and blocks from remote peers.
func New(mode SyncMode, stateDb ethdb.Database, mux *event.TypeMux, hasHeader headerCheckFn, hasBlockAndState blockAndStateCheckFn,
func in downloader.go (eth\downloader) : 
	logger := log.New("peer", id)
func in downloader.go (eth\downloader) : 
	logger := log.New("peer", id)
newTester in downloader_test.go (eth\downloader) : 
	tester.downloader = New(FullSync, tester.stateDb, new(event.TypeMux), tester.hasHeader, tester.hasBlock, tester.getHeader,
func in downloader_test.go (eth\downloader) : 
		return 0, errors.New("unknown parent")
func in downloader_test.go (eth\downloader) : 
			return i, errors.New("unknown parent")
func in downloader_test.go (eth\downloader) : 
			return i, errors.New("unknown parent")
func in downloader_test.go (eth\downloader) : 
			return i, errors.New("unknown parent")
func in downloader_test.go (eth\downloader) : 
			return i, errors.New("unknown owner")
func in downloader_test.go (eth\downloader) : 
			return i, errors.New("unknown parent")
assertOwnForkedChain in downloader_test.go (eth\downloader) : 
			if statedb, err := state.New(tester.ownHeaders[tester.ownHashes[index]].Root, tester.stateDb); statedb == nil || err != nil {
var in dpa.go (swarm\storage) : 
	notFound = errors.New("not found")
var in ecdsa.go (vendor\github.com\dgrijalva\jwt-go) : 
	ErrECDSAVerification = errors.New("crypto/ecdsa: verification error")
ecdsa.go (vendor\github.com\dgrijalva\jwt-go) line 86 : 
	hasher := m.Hash.New()
ecdsa.go (vendor\github.com\dgrijalva\jwt-go) line 114 : 
	hasher := m.Hash.New()
var in ecdsa_utils.go (vendor\github.com\dgrijalva\jwt-go) : 
	ErrNotECPublicKey  = errors.New("Key is not a valid ECDSA public key")
	ErrNotECPrivateKey = errors.New("Key is not a valid ECDSA private key")
messageTag in ecies.go (crypto\ecies) : 
	mac := hmac.New(hash, km)
TestKDF in ecies_test.go (crypto\ecies) : 
	h := sha256.New()
func in ed25519.go (vendor\golang.org\x\crypto\ed25519) : 
		return nil, errors.New("ed25519: cannot sign hashed message")
Sign in ed25519.go (vendor\golang.org\x\crypto\ed25519) : 
	h := sha512.New()
Verify in ed25519.go (vendor\golang.org\x\crypto\ed25519) : 
	h := sha512.New()
len in elgamal.go (vendor\golang.org\x\crypto\openpgp\elgamal) : 
		err = errors.New("elgamal: message too long")
elgamal.go (vendor\golang.org\x\crypto\openpgp\elgamal) line 100 : 
		return nil, errors.New("elgamal: decryption error")
encode.go (rlp) line 163 : 
	New: func() interface{} { return &encbuf{sizebuf: make([]byte, 9)} },
writeByteArray in encode.go (rlp) : 
		copy := reflect.New(val.Type()).Elem()
encode.go (vendor\github.com\golang\snappy) line 108 : 
var errClosed = errors.New("snappy: Writer is closed")
encode_test.go (rlp) line 241 : 
	{val: &testEncoder{errors.New("test error")}, error: "test error"},
encode_test.go (rlp) line 245 : 
	{val: &struct{ TE testEncoder }{testEncoder{errors.New("test error")}}, error: "test error"},
encoding.go (vendor\golang.org\x\text\encoding) line 293 : 
var ErrInvalidUTF8 = errors.New("encoding: invalid UTF-8")
engine.go (consensus\istanbul\backend) line 49 : 
	errInvalidProposal = errors.New("invalid proposal")
engine.go (consensus\istanbul\backend) line 52 : 
	errInvalidSignature = errors.New("invalid signature")
engine.go (consensus\istanbul\backend) line 55 : 
	errUnknownBlock = errors.New("unknown block")
engine.go (consensus\istanbul\backend) line 57 : 
	errUnauthorized = errors.New("unauthorized")
engine.go (consensus\istanbul\backend) line 59 : 
	errInvalidDifficulty = errors.New("invalid difficulty")
engine.go (consensus\istanbul\backend) line 61 : 
	errInvalidExtraDataFormat = errors.New("invalid extra data format")
engine.go (consensus\istanbul\backend) line 63 : 
	errInvalidMixDigest = errors.New("invalid Istanbul mix digest")
engine.go (consensus\istanbul\backend) line 65 : 
	errInvalidNonce = errors.New("invalid nonce")
engine.go (consensus\istanbul\backend) line 67 : 
	errInvalidUncleHash = errors.New("non empty uncle hash")
engine.go (consensus\istanbul\backend) line 69 : 
	errInconsistentValidatorSet = errors.New("non empty uncle hash")
engine.go (consensus\istanbul\backend) line 71 : 
	errInvalidTimestamp = errors.New("invalid timestamp")
engine.go (consensus\istanbul\backend) line 74 : 
	errInvalidVotingChain = errors.New("invalid voting chain")
engine.go (consensus\istanbul\backend) line 77 : 
	errInvalidVote = errors.New("vote nonce not 0x00..0 or 0xff..f")
engine.go (consensus\istanbul\backend) line 79 : 
	errInvalidCommittedSeals = errors.New("invalid committed seals")
engine.go (consensus\istanbul\backend) line 81 : 
	errEmptyCommittedSeals = errors.New("zero committed seals")
func in engine.go (consensus\istanbul\backend) : 
	sb.core = istanbulCore.New(sb, sb.config)
import in engine_test.go (consensus\istanbul\backend) : 
	backend := New(config, eventMux, nodeKeys[0], memDB)
error.go (core) line 23 : 
	ErrKnownBlock = errors.New("block already known")
error.go (core) line 27 : 
	ErrGasLimitReached = errors.New("gas limit reached")
error.go (core) line 30 : 
	ErrBlacklistedHash = errors.New("blacklisted hash")
var in error.go (vendor\github.com\naoina\toml) : 
	errArrayMultiType = errors.New("array can't contain multiple types")
func in error.go (vendor\github.com\robertkrimen\otto) : 
				err = errors.New(caught.string())
errors.go (accounts) line 26 : 
var ErrUnknownAccount = errors.New("unknown account")
errors.go (accounts) line 30 : 
var ErrUnknownWallet = errors.New("unknown wallet")
errors.go (accounts) line 34 : 
var ErrNotSupported = errors.New("not supported")
errors.go (accounts) line 38 : 
var ErrInvalidPassphrase = errors.New("invalid passphrase")
errors.go (accounts) line 42 : 
var ErrWalletAlreadyOpen = errors.New("wallet already open")
errors.go (accounts) line 46 : 
var ErrWalletClosed = errors.New("wallet closed")
errors.go (consensus) line 24 : 
	ErrUnknownAncestor = errors.New("unknown ancestor")
errors.go (consensus) line 28 : 
	ErrFutureBlock = errors.New("block in the future")
errors.go (consensus) line 32 : 
	ErrInvalidNumber = errors.New("invalid block number")
errors.go (consensus) line 36 : 
	ErrMissingSignature = errors.New("extra-data 65 byte suffix signature missing")
errors.go (consensus\istanbul) line 24 : 
	ErrUnauthorizedAddress = errors.New("unauthorized address")
errors.go (consensus\istanbul\core) line 24 : 
	errInconsistentSubject = errors.New("inconsistent subjects")
errors.go (consensus\istanbul\core) line 27 : 
	errNotFromProposer = errors.New("message does not come from proposer")
errors.go (consensus\istanbul\core) line 29 : 
	errIgnored = errors.New("message is ignored")
errors.go (consensus\istanbul\core) line 32 : 
	errFutureMessage = errors.New("future message")
errors.go (consensus\istanbul\core) line 35 : 
	errOldMessage = errors.New("old message")
errors.go (consensus\istanbul\core) line 37 : 
	errInvalidMessage = errors.New("invalid message")
errors.go (consensus\istanbul\core) line 39 : 
	errFailedDecodePreprepare = errors.New("failed to decode preprepare")
errors.go (consensus\istanbul\core) line 41 : 
	errFailedDecodePrepare = errors.New("failed to decode prepare")
errors.go (consensus\istanbul\core) line 43 : 
	errFailedDecodeCommit = errors.New("failed to decode commit")
errors.go (consensus\istanbul\core) line 45 : 
	errFailedDecodeCheckpoint = errors.New("failed to decode checkpoint")
errors.go (consensus\istanbul\core) line 47 : 
	errFailedDecodeMessageSet = errors.New("failed to decode message set")
errors.go (core\vm) line 22 : 
	ErrOutOfGas            = errors.New("out of gas")
	ErrCodeStoreOutOfGas   = errors.New("contract creation code storage out of gas")
	ErrDepth               = errors.New("max call depth exceeded")
	ErrTraceLimitReached   = errors.New("the number of logs reached the specified limit")
	ErrInsufficientBalance = errors.New("insufficient balance for transfer")
errors.go (vendor\github.com\dgrijalva\jwt-go) line 9 : 
	ErrInvalidKey      = errors.New("key is invalid")
	ErrInvalidKeyType  = errors.New("key is of invalid type")
	ErrHashUnavailable = errors.New("the requested hash function is unavailable")
errors.go (vendor\github.com\syndtr\goleveldb\leveldb) line 16 : 
	ErrReadOnly         = errors.New("leveldb: read-only mode")
	ErrSnapshotReleased = errors.New("leveldb: snapshot released")
	ErrIterReleased     = errors.New("leveldb: iterator released")
	ErrClosed           = errors.New("leveldb: closed")
var in errors.go (vendor\github.com\syndtr\goleveldb\leveldb\errors) : 
	ErrNotFound    = New("leveldb: not found")
var in errors.go (vendor\github.com\syndtr\goleveldb\leveldb\errors) : 
// New returns an error that formats as the given text.
func New(text string) error {
	return errors.New(text)
ethash.go (consensus\ethash) line 41 : 
var ErrInvalidDumpMagic = errors.New("invalid dump magic")
var in ethash.go (consensus\ethash) : 
	sharedEthash = New("", 3, 0, "", 1, 0)
func in ethash.go (consensus\ethash) : 
		logger := log.New("epoch", c.epoch)
func in ethash.go (consensus\ethash) : 
		logger := log.New("epoch", d.epoch)
ethash.go (consensus\ethash) line 355 : 
// New creates a full sized ethash PoW scheme.
func New(cachedir string, cachesinmem, cachesondisk int, dagdir string, dagsinmem, dagsondisk int) *Ethash {
func in ethash.go (consensus\ethash) : 
		// New current cache, set its initial timestamp
func in ethash.go (consensus\ethash) : 
		// New current dataset, set its initial timestamp
func in ethereum.go (mobile) : 
		return nil, errors.New("index out of bounds")
func in ethereum.go (mobile) : 
		return errors.New("index out of bounds")
ethstats.go (ethstats) line 70 : 
// New returns a monitoring service ready for stats reporting.
func New(url string, ethServ *eth.Ethereum, lesServ *les.LightEthereum) (*Service, error) {
func in ethstats.go (ethstats) : 
		return errors.New("unauthorized")
func in ethstats.go (ethstats) : 
		return errors.New("ping timed out")
eucjp.go (vendor\golang.org\x\text\encoding\japanese) line 26 : 
var errInvalidEUCJP = errors.New("japanese: invalid EUC-JP encoding")
euckr.go (vendor\golang.org\x\text\encoding\korean) line 29 : 
var errInvalidEUCKR = errors.New("korean: invalid EUC-KR encoding")
event.go (event) line 50 : 
var ErrMuxClosed = errors.New("event: mux closed")
func in expression.go (vendor\github.com\robertkrimen\otto\parser) : 
		New:    idx,
func in fallbackinput.go (vendor\github.com\peterh\liner) : 
	return "", errors.New("liner: function not supported in this terminal")
fastwalk.go (vendor\golang.org\x\tools\imports) line 25 : 
var traverseLink = errors.New("traverse symlink, assuming target is a directory")
var in faucet.go (cmd\faucet) : 
	err = template.Must(template.New("").Parse(string(tmpl))).Execute(website, map[string]interface{}{
faucet.go (cmd\faucet) line 212 : 
	stack, err := node.New(&node.Config{
faucet.go (cmd\faucet) line 235 : 
		return les.New(ctx, &cfg)
faucet.go (cmd\faucet) line 244 : 
			return ethstats.New(stats, nil, serv)
func in faucet.go (cmd\faucet) : 
			// New chain head arrived, query the current stats and stream to clients
raiseFdLimit in fdlimit_windows.go (cmd\utils) : 
		return errors.New("file descriptor limit (16384) reached")
feed.go (event) line 25 : 
var errBadChannel = errors.New("event: Subscribe argument does not have sendable channel type")
var in fetcher.go (eth\fetcher) : 
	errTerminated = errors.New("terminated")
fetcher.go (eth\fetcher) line 146 : 
// New creates a block fetcher to retrieve blocks based on hash announcements.
func New(getBlock blockRetrievalFn, verifyHeader headerVerifierFn, broadcastBlock blockBroadcasterFn, chainHeight chainHeightFn, insertChain chainInsertFn, dropPeer peerDropFn) *Fetcher {
New in fetcher.go (eth\fetcher) : 
		queue:          prque.New(),
newTester in fetcher_test.go (eth\fetcher) : 
	tester.fetcher = New(tester.getBlock, tester.verifyHeader, tester.broadcastBlock, tester.chainHeight, tester.insertChain, tester.dropPeer)
func in fetcher_test.go (eth\fetcher) : 
			return i, errors.New("unknown parent")
func in file.go (vendor\github.com\Azure\azure-storage-go) : 
		return nil, errors.New("the value for rangeEnd must be greater than or equal to rangeStart")
func in file.go (vendor\github.com\Azure\azure-storage-go) : 
		return nil, errors.New("range cannot exceed 4MB in size")
func in file.go (vendor\github.com\Azure\azure-storage-go) : 
		return errors.New("bytes cannot be nil")
var in file_storage.go (vendor\github.com\syndtr\goleveldb\leveldb\storage) : 
	errFileOpen = errors.New("leveldb/storage: file still open")
	errReadOnly = errors.New("leveldb/storage: storage is read-only")
func in file_storage.go (vendor\github.com\syndtr\goleveldb\leveldb\storage) : 
						Err: errors.New("leveldb/storage: corrupted or incomplete meta file"),
filter.go (eth\filters) line 53 : 
// New creates a new filter which uses a bloom filter on blocks to figure out whether
filter.go (eth\filters) line 57 : 
func New(backend Backend, useMipMap bool) *Filter {
filter.go (event\filter) line 40 : 
func New() *Filters {
var in filter_system.go (eth\filters) : 
	ErrInvalidSubscriptionID = errors.New("invalid id")
TestPendingLogsSubscription in filter_system_test.go (eth\filters) : 
			// block numbers are ignored for filters created with New***Filter, these return all logs that match the given criteria when the state changes
BenchmarkMipmaps in filter_test.go (eth\filters) : 
	filter := New(backend, true)
TestFilters in filter_test.go (eth\filters) : 
	filter := New(backend, true)
TestFilters in filter_test.go (eth\filters) : 
	filter = New(backend, true)
TestFilters in filter_test.go (eth\filters) : 
	filter = New(backend, true)
TestFilters in filter_test.go (eth\filters) : 
	filter = New(backend, true)
TestFilters in filter_test.go (eth\filters) : 
	filter = New(backend, true)
TestFilters in filter_test.go (eth\filters) : 
	filter = New(backend, true)
TestFilters in filter_test.go (eth\filters) : 
	filter = New(backend, true)
import in filter_test.go (event\filter) : 
	fm := New()
TestInstallFilters in filter_test.go (whisper\whisperv5) : 
	w := New()
TestWatchers in filter_test.go (whisper\whisperv5) : 
	w := New()
final_committed.go (consensus\istanbul\core) line 28 : 
	logger := c.logger.New("state", c.state, "number", proposal.Number(), "hash", proposal.Hash())
fix.go (vendor\golang.org\x\tools\imports) line 826 : 
// searching for "client.New")
RegisterEthService in flags.go (cmd\utils) : 
			return les.New(ctx, cfg)
RegisterEthService in flags.go (cmd\utils) : 
			fullNode, err := eth.New(ctx, cfg)  //최초 이더리움 오브젝트 생성
RegisterShhService in flags.go (cmd\utils) : 
	if err := stack.Register(func(*node.ServiceContext) (node.Service, error) { return whisper.New(), nil }); err != nil {
RegisterEthStatsService in flags.go (cmd\utils) : 
		return ethstats.New(url, ethServ, lesServ)
flags.go (cmd\utils) line 1099 : 
		engine = ethash.New("", 1, 0, "", 1, 0)
format.go (log) line 319 : 
	New: func() interface{} { return new(bytes.Buffer) },
forwarding.go (swarm\network) line 49 : 
	r := rand.New(rand.NewSource(time.Now().UnixNano()))
var in fuse.go (vendor\bazil.org\fuse) : 
	ErrClosedWithoutInit = errors.New("fuse connection closed without init")
fuse.go (vendor\bazil.org\fuse) line 420 : 
	New: allocMessage,
func in fuse.go (vendor\bazil.org\fuse) : 
		return nil, errors.New("fuse: message too short")
fuse_file.go (swarm\fuse) line 38 : 
	errInvalidOffset           = errors.New("Invalid offset during write")
	errFileSizeMaxLimixReached = errors.New("File size exceeded max limit")
var in gbk.go (vendor\golang.org\x\text\encoding\simplifiedchinese) : 
	errInvalidGB18030 = errors.New("simplifiedchinese: invalid GB18030 encoding")
	errInvalidGBK     = errors.New("simplifiedchinese: invalid GBK encoding")
genesis.go (core) line 39 : 
var errGenesisNoConfig = errors.New("genesis has no chain configuration")
genesis.go (core) line 85 : 
	Stored, New common.Hash
func in genesis.go (core) : 
	return fmt.Sprintf("database already contains an incompatible genesis block (have %x, new %x)", e.Stored[:8], e.New[:8])
func in genesis.go (core) : 
	statedb, _ := state.New(common.Hash{}, db)
TestSetupGenesis in genesis_test.go (core) : 
			wantErr:    &GenesisMismatchError{Stored: customghash, New: params.TestNetGenesisHash},
func in gen_genesis.go (core) : 
		return errors.New("missing required field 'gasLimit' for Genesis")
func in gen_genesis.go (core) : 
		return errors.New("missing required field 'difficulty' for Genesis")
func in gen_genesis.go (core) : 
		return errors.New("missing required field 'alloc' for Genesis")
func in gen_genesis_account.go (core) : 
		return errors.New("missing required field 'balance' for GenesisAccount")
func in gen_header_json.go (core\types) : 
		return errors.New("missing required field 'parentHash' for Header")
func in gen_header_json.go (core\types) : 
		return errors.New("missing required field 'sha3Uncles' for Header")
func in gen_header_json.go (core\types) : 
		return errors.New("missing required field 'miner' for Header")
func in gen_header_json.go (core\types) : 
		return errors.New("missing required field 'stateRoot' for Header")
func in gen_header_json.go (core\types) : 
		return errors.New("missing required field 'transactionsRoot' for Header")
func in gen_header_json.go (core\types) : 
		return errors.New("missing required field 'receiptsRoot' for Header")
func in gen_header_json.go (core\types) : 
		return errors.New("missing required field 'logsBloom' for Header")
func in gen_header_json.go (core\types) : 
		return errors.New("missing required field 'difficulty' for Header")
func in gen_header_json.go (core\types) : 
		return errors.New("missing required field 'number' for Header")
func in gen_header_json.go (core\types) : 
		return errors.New("missing required field 'gasLimit' for Header")
func in gen_header_json.go (core\types) : 
		return errors.New("missing required field 'gasUsed' for Header")
func in gen_header_json.go (core\types) : 
		return errors.New("missing required field 'timestamp' for Header")
func in gen_header_json.go (core\types) : 
		return errors.New("missing required field 'extraData' for Header")
func in gen_header_json.go (core\types) : 
		return errors.New("missing required field 'mixHash' for Header")
func in gen_header_json.go (core\types) : 
		return errors.New("missing required field 'nonce' for Header")
func in gen_log_json.go (core\types) : 
		return errors.New("missing required field 'address' for Log")
func in gen_log_json.go (core\types) : 
		return errors.New("missing required field 'topics' for Log")
func in gen_log_json.go (core\types) : 
		return errors.New("missing required field 'data' for Log")
func in gen_log_json.go (core\types) : 
		return errors.New("missing required field 'transactionHash' for Log")
func in gen_log_json.go (core\types) : 
		return errors.New("missing required field 'transactionIndex' for Log")
func in gen_log_json.go (core\types) : 
		return errors.New("missing required field 'logIndex' for Log")
func in gen_receipt_json.go (core\types) : 
		return errors.New("missing required field 'root' for Receipt")
func in gen_receipt_json.go (core\types) : 
		return errors.New("missing required field 'cumulativeGasUsed' for Receipt")
func in gen_receipt_json.go (core\types) : 
		return errors.New("missing required field 'logsBloom' for Receipt")
func in gen_receipt_json.go (core\types) : 
		return errors.New("missing required field 'logs' for Receipt")
func in gen_receipt_json.go (core\types) : 
		return errors.New("missing required field 'transactionHash' for Receipt")
func in gen_receipt_json.go (core\types) : 
		return errors.New("missing required field 'gasUsed' for Receipt")
func in gen_tx_json.go (core\types) : 
		return errors.New("missing required field 'nonce' for txdata")
func in gen_tx_json.go (core\types) : 
		return errors.New("missing required field 'gasPrice' for txdata")
func in gen_tx_json.go (core\types) : 
		return errors.New("missing required field 'gas' for txdata")
func in gen_tx_json.go (core\types) : 
		return errors.New("missing required field 'value' for txdata")
func in gen_tx_json.go (core\types) : 
		return errors.New("missing required field 'input' for txdata")
func in gen_tx_json.go (core\types) : 
		return errors.New("missing required field 'v' for txdata")
func in gen_tx_json.go (core\types) : 
		return errors.New("missing required field 'r' for txdata")
func in gen_tx_json.go (core\types) : 
		return errors.New("missing required field 's' for txdata")
geth.go (mobile) line 126 : 
	rawStack, err := node.New(nodeConf)
geth.go (mobile) line 154 : 
			return les.New(ctx, &ethConf)
geth.go (mobile) line 164 : 
				return ethstats.New(config.EthereumNetStats, nil, lesServ)
geth.go (mobile) line 172 : 
		if err := rawStack.Register(func(*node.ServiceContext) (node.Service, error) { return whisper.New(), nil }); err != nil {
func in handler.go (consensus\istanbul\core) : 
	logger := c.logger.New("address", c.address)
func in handler.go (consensus\istanbul\core) : 
	logger := c.logger.New("address", c.address, "from", src)
handler.go (eth) line 56 : 
var errIncompatibleConfig = errors.New("incompatible configuration")
handler.go (eth) line 196 : 
	manager.downloader = downloader.New(mode, chaindb, manager.eventMux, blockchain.HasHeader, blockchain.HasBlockAndState, blockchain.GetHeaderByHash,
handler.go (eth) line 217 : 
	manager.fetcher = fetcher.New(blockchain.GetBlockByHash, validator, manager.BroadcastBlock, heighter, inserter, manager.removePeer)
handler.go (les) line 66 : 
var errIncompatibleConfig = errors.New("incompatible configuration")
handler.go (les) line 202 : 
		manager.downloader = downloader.New(downloader.LightSync, chainDb, manager.eventMux, blockchain.HasHeader, nil, blockchain.GetHeaderByHash,
handler.go (les) line 226 : 
	manager.fetcher = fetcher.New(chainman.GetBlockNoOdr, validator, nil, heighter, chainman.InsertChain, manager.removePeer)
func in handler.go (les) : 
				logger := log.New("topic", lesTopic)
func in handler.go (les) : 
				if trie, _ := trie.New(header.Root, pm.chainDb); trie != nil {
func in handler.go (les) : 
				if tr, _ := trie.New(header.Root, pm.chainDb); tr != nil {
func in handler.go (les) : 
							tr, _ = trie.New(acc.Root, pm.chainDb)
func in handler.go (les) : 
					if tr, _ := trie.New(root, pm.chainDb); tr != nil {
handler_glog.go (log) line 31 : 
var errVmoduleSyntax = errors.New("expect comma-separated list of filename=N")
handler_glog.go (log) line 34 : 
var errTraceSyntax = errors.New("expect file.go:234")
testGetNodeData in handler_test.go (eth) : 
		trie, _ := state.New(pm.blockchain.GetBlockByNumber(i).Root(), statedb)
testGetProofs in handler_test.go (les) : 
		trie, _ := trie.New(root, db)
func in handshake.go (vendor\golang.org\x\crypto\ssh) : 
		return errors.New("ssh: only handshakeTransport can send kexInit")
func in handshake.go (vendor\golang.org\x\crypto\ssh) : 
		return errors.New("ssh: only handshakeTransport can send newKeys")
hash.go (vendor\github.com\pborman\uuid) line 42 : 
//  NewHash(md5.New(), space, data, 3)
NewMD5 in hash.go (vendor\github.com\pborman\uuid) : 
	return NewHash(md5.New(), space, data, 3)
hash.go (vendor\github.com\pborman\uuid) line 50 : 
//  NewHash(sha1.New(), space, data, 5)
NewSHA1 in hash.go (vendor\github.com\pborman\uuid) : 
	return NewHash(sha1.New(), space, data, 5)
hasher.go (trie) line 37 : 
	New: func() interface{} {
hd.go (accounts) line 69 : 
		return nil, errors.New("empty derivation path")
hd.go (accounts) line 72 : 
		return nil, errors.New("ambiguous path: use 'm/' prefix for absolute paths, or no leading '/' for relative ones")
hd.go (accounts) line 82 : 
		return nil, errors.New("empty derivation path") // Empty relative paths
headerchain.go (core) line 72 : 
	headerCache, _ := lru.New(headerCacheLimit)
	tdCache, _ := lru.New(tdCacheLimit)
	numberCache, _ := lru.New(numberCacheLimit)
headerchain.go (core) line 89 : 
		rand:          mrand.New(mrand.NewSource(seed.Int64())),
func in headerchain.go (core) : 
			return 0, errors.New("aborted")
func in headerchain.go (core) : 
			return i, errors.New("aborted")
printHelp in help.go (vendor\gopkg.in\urfave\cli.v1) : 
	t := template.Must(template.New("help").Funcs(funcMap).Parse(templ))
func in helper_test.go (core) : 
	return list.New()
hexutil.go (common\hexutil) line 44 : 
	ErrEmptyString   = errors.New("empty hex string")
	ErrMissingPrefix = errors.New("missing 0x prefix for hex data")
	ErrSyntax        = errors.New("invalid hex")
	ErrEmptyNumber   = errors.New("hex number has no digits after 0x")
	ErrLeadingZero   = errors.New("hex number has leading zero digits after 0x")
	ErrOddLength     = errors.New("hex string has odd length")
	ErrUint64Range   = errors.New("hex number does not fit into 64 bits")
hexutil.go (common\hexutil) line 52 : 
	ErrBig256Range   = errors.New("hex number does not fit into 256 bits")
hid.c (vendor\github.com\karalabe\hid\hidapi\libusb) line 1352 : 
	LANG("English - New Zealand", "en_nz", 0x1409),
hid.go (vendor\github.com\karalabe\hid) line 14 : 
var ErrDeviceClosed = errors.New("hid: device closed")
hid.go (vendor\github.com\karalabe\hid) line 18 : 
var ErrUnsupportedPlatform = errors.New("hid: unsupported platform")
func in hid_enabled.go (vendor\github.com\karalabe\hid) : 
		return nil, errors.New("hidapi: failed to open device")
func in hid_enabled.go (vendor\github.com\karalabe\hid) : 
			return 0, errors.New("hidapi: unknown failure")
func in hid_enabled.go (vendor\github.com\karalabe\hid) : 
		return 0, errors.New("hidapi: " + failure)
func in hid_enabled.go (vendor\github.com\karalabe\hid) : 
			return 0, errors.New("hidapi: unknown failure")
func in hid_enabled.go (vendor\github.com\karalabe\hid) : 
		return 0, errors.New("hidapi: " + failure)
---- New Search Errors Encountered (1) ----
The following 1 files could not be processed:
C:\Users\Administrator\go\src\github.com\ethereum\go-ethereum\개발관련파일들\genesis.json : File could not be opened.
---- package istanbulBackend Matches (0 in 0 files) ----
---- package istanbulBackend Search Errors Encountered (5) ----
The following 5 files could not be processed:
C:\Users\Administrator\go\src\github.com\ethereum\go-ethereum\개발관련파일들\genesis.json : File could not be opened.
C:\Users\Administrator\go\src\github.com\ethereum\go-ethereum\개발관련파일들\istanbul-genesis.json : File could not be opened.
C:\Users\Administrator\go\src\github.com\ethereum\go-ethereum\consensus\poDC\backend\pre-prepare\preprepare.go : File could not be opened.
C:\Users\Administrator\go\src\github.com\ethereum\go-ethereum\consensus\poDC\backend\pre-prepare\preprepare_test.go : File could not be opened.
C:\Users\Administrator\go\src\github.com\ethereum\go-ethereum\개발관련파일들\simpleContract.go : File could not be opened.
