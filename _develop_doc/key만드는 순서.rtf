{\rtf1\ansi\ansicpg949\cocoartf1561\cocoasubrtf610
{\fonttbl\f0\fnil\fcharset0 Menlo-Regular;\f1\fnil\fcharset129 AppleSDGothicNeo-Regular;}
{\colortbl;\red255\green255\blue255;\red223\green162\blue81;\red255\green255\blue255;\red153\green168\blue186;
\red160\green140\blue102;\red185\green99\blue48;\red160\green180\blue107;\red94\green160\blue175;\red191\green100\blue38;
\red64\green156\blue222;\red160\green140\blue102;\red255\green255\blue255;\red153\green168\blue186;\red32\green32\blue32;
\red101\green101\blue101;\red86\green132\blue173;}
{\*\expandedcolortbl;;\csgenericrgb\c87451\c63529\c31765;\cssrgb\c100000\c100000\c100000;\csgenericrgb\c60000\c65882\c72941;
\csgenericrgb\c62745\c54902\c40000;\csgenericrgb\c72549\c38824\c18824;\csgenericrgb\c62745\c70588\c41961;\csgenericrgb\c36863\c62745\c68627;\csgenericrgb\c74902\c39216\c14902;
\csgenericrgb\c25098\c61176\c87059;\csgenericrgb\c62745\c54902\c40000;\cssrgb\c100000\c100000\c100000;\csgenericrgb\c60000\c65882\c72941;\csgenericrgb\c12549\c12549\c12549;
\csgenericrgb\c39608\c39608\c39608;\csgenericrgb\c33725\c51765\c67843;}
\paperw11900\paperh16840\margl1440\margr1440\vieww18620\viewh12420\viewkind0
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f0\fs24 \cf2 \cb3 RegisterEthService\
-> \cf4 err = stack.\cf5 Register\cf4 (\cf6 func\cf4 (ctx *\cf7 node\cf4 .\cf8 ServiceContext\cf4 ) (\cf7 node\cf4 .\cf8 Service\cf9 , \cf6 error\cf4 )\
-> \cf6 func \cf4 (\cf10 n \cf4 *\cf8 Node\cf4 ) \cf2 Register\cf4 (constructor \cf8 ServiceConstructor\cf4 ) \cf6 error \
\
\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0
\cf6 func \cf2 New\cf4 (ctx *\cf7 node\cf4 .\cf8 ServiceContext\cf9 , \cf4 config *\cf8 Config\cf4 ) (*\cf8 Ethereum\cf9 , \cf6 error\cf4 ) \{\
->\
eth.etherbase = \cf7 crypto\cf4 .\cf5 PubkeyToAddress\cf4 (ctx.\cf5 NodeKey\cf4 ().PublicKey)\
\

\f1 NodeKey()\'c7\'d4\'bc\'f6\'b7\'ce \'b1\'e2 \'b1\'b8\'bc\'ba\'b5\'c8 Private Key\'b8\'a6 \'be\'f8\'c0\'b8\'b8\'e9 \'bb\'fd\'bc\'ba\'c7\'cf\'b0\'ed, \'c0\'d6\'c0\'b8\'b8\'e9 \'b0\'a1\'c1\'ae\'bf\'c2\'b4\'d9. PublicKey\'c7\'d4\'bc\'f6\'b7\'ce,, \'b0\'f8\'b0\'b3\'c5\'b0\'b5\'b5 \'bb\'fd\'bc\'ba\'c7\'d1\'b4\'d9. \
\
=> \'c0\'cc\'b7\'b1\'bd\'c4\'c0\'b8\'b7\'ce \'c7\'d4\'bc\'f6\'b8\'a6 \'be\'b2\'b8\'e9, \'b0\'b3\'c0\'ce\'c5\'b0\'bf\'a1\'bc\'ad \'b0\'f8\'b0\'b3\'c5\'b0\'b8\'a6 \'b0\'e8\'bb\'ea\'c7\'d8\'bc\'ad \'b8\'b8\'b5\'e9\'be\'ee\'c1\'dc. \
\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0 \cf11 \cb12 NodeKey\cf13 ().PublicKey)
\f1 \cf4 \cb3 \
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0
\cf4 \
\
\

\f0 \cb14 err = stack.\cf5 \cb14 Register\cf4 \cb14 (\cf6 func\cf4 (ctx *\cf7 \cb14 node\cf4 \cb14 .\cf8 ServiceContext\cf4 ) (\cf7 \cb14 node\cf4 \cb14 .\cf8 Service\cf9 \cb14 , \cf6 \cb14 error\cf4 ) \{\
\
\
\
	fullNode\cf9 \cb14 , \cf4 \cb14 err := \cf7 \cb14 eth\cf4 \cb14 .\cf5 \cb14 New\cf4 \cb14 (ctx\cf9 \cb14 , \cf4 \cb14 cfg)  \cf15 \cb14 //
\f1 \'c3\'d6\'c3\'ca
\f0  
\f1 \'c0\'cc\'b4\'f5\'b8\'ae\'bf\'f2
\f0  
\f1 \'bf\'c0\'ba\'ea\'c1\'a7\'c6\'ae
\f0  
\f1 \'bb\'fd\'bc\'ba
\f0  \
	\cf6 \cb14 if \cf4 fullNode != \cf6 nil \cf4 && cfg.LightServ > \cf16 \cb14 0 \cf4 \cb14 \{\
		ls\cf9 \cb14 , \cf4 \cb14 _ := \cf7 \cb14 les\cf4 \cb14 .\cf5 \cb14 NewLesServer\cf4 \cb14 (fullNode\cf9 \cb14 , \cf4 \cb14 cfg)\
		fullNode.\cf5 \cb14 AddLesServer\cf4 \cb14 (ls)\
	\}\
	\cf6 return \cf4 fullNode\cf9 \cb14 , \cf4 \cb14 err\
\}                            \
\
\
)\
\cb3 \
=> 
\f1 \'c0\'d4\'b7\'c2\'c6\'c4\'b6\'f3\'b9\'cc\'c5\'cd\'b7\'ce
\f0  
\f1 \'c7\'d4\'bc\'f6\'b8\'a6
\f0  
\f1 \'9b\'a7\'b0\'ed
\f0 , ctx 
\f1 \'ba\'af\'bc\'f6\'b4\'c2
\f0  
\f1 \'b0\'f8\'c0\'af\'c7\'d4
\f0 . \
\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0
\cf6 \
\
\
->\cf15 // Start create a live P2P node and starts running it.\
\cf6 func \cf4 (\cf10 n \cf4 *\cf8 Node\cf4 ) \cf2 Start\cf4 () \cf6 error \cf4 \{\
\cf4 \
\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0
\cf15 // Initialize the p2p server. This creates the node key and\
// discovery databases.\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0
\cf4 \
\cf10 n\cf4 .serverConfig.PrivateKey = \cf10 n\cf4 .config.\cf5 NodeKey\cf4 ()  \cf15 //
\f1 \'c3\'d6\'c3\'ca
\f0  
\f1 \'b3\'eb\'b5\'e5
\f0  
\f1 \'c5\'b0
\f0  
\f1 \'bb\'fd\'bc\'ba
\f0  
\f1 \'ba\'ce\'ba\'d0\
\
\
\
\
\

\f0 \
\cf4 \
\
\cf4 \
\cf15 // PublicKey represents an ECDSA public key.\
\cf6 type \cf4 PublicKey \cf6 struct \cf4 \{\
	\cf7 elliptic\cf4 .\cf8 Curve\
	\cf4 X\cf9 , \cf4 Y *\cf7 big\cf4 .\cf8 Int\
\cf4 \}\
\
\cf15 // PrivateKey represents an ECDSA private key.\
\cf6 type \cf4 PrivateKey \cf6 struct \cf4 \{\
	\cf8 PublicKey\
	\cf4 D *\cf7 big\cf4 .\cf8 Int\
\cf4 \}\
\cf4 \
\
\
\
\
\
\cf15 // Public returns the public key corresponding to priv.\
\cf6 func \cf4 (\cf10 priv \cf4 *\cf8 PrivateKey\cf4 ) \cf2 Public\cf4 () \cf7 crypto\cf4 .\cf8 PublicKey \cf4 \{\
	\cf6 return \cf4 &\cf10 priv\cf4 .PublicKey\
\}\
\
}